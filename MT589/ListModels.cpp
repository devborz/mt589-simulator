#include <ListModels.h>

std::map<std::string, std::string> FuncListItem::cpe_functions;

std::vector<FuncListItem*> FuncListItem::items;

void FuncListItem::prepareFunctions() {
    std::vector<std::string> mnemonics = {
      "ILR",
      "ACM",
      "SRA",
      "ALR",
      "AMA",
      "LMI",
      "LMM",
      "CIA",
      "DSM",
      "LDM",
      "DCA",
      "CSR",
      "CSA",
      "SDR",
      "SDA",
      "LDI",
      "INR",
      "INA",
      "ADR",
      "AIA",
      "CLR",
      "CLA",
      "ANR",
      "ANM",
      "ANI",
      "TZR",
      "LTM",
      "TZA",
      "NOP",
      "LMF",
      "ORR",
      "ORM",
      "ORI",
      "CMR",
      "LCM",
      "CMA",
      "XNR",
      "XNM",
      "XNI"
    };
    std::vector<std::string> functions = {
      "0001001",
      "0001010",
      "0001110",
      "0001001",
      "0001010",
      "0011001",
      "0011010",
      "0011110",
      "0011001",
      "0011010",
      "0011110",
      "0101001",
      "0101010",
      "0101001",
      "0101010",
      "0101110",
      "0111001",
      "0111110",
      "0111001",
      "0111110",
      "1001001",
      "1001010",
      "1001001",
      "1001010",
      "1001110",
      "1011001",
      "1011010",
      "1011110",
      "1101001",
      "1101010",
      "1101001",
      "1101010",
      "1101110",
      "1101001",
      "1101010",
      "1101110",
      "1101001",
      "1101010",
      "1101110"
    };
    std::vector<std::string> ks = {
      "00",
      "00",
      "00",
      "11",
      "11",
      "00",
      "00",
      "00",
      "11",
      "11",
      "11",
      "00",
      "00",
      "11",
      "11",
      "11",
      "00",
      "00",
      "11",
      "11",
      "00",
      "00",
      "11",
      "11",
      "11",
      "11",
      "11",
      "11",
      "00",
      "00",
      "11",
      "11",
      "11",
      "00",
      "00",
      "00",
      "11",
      "11",
      "11"
    };

    for (size_t i = 0; i < mnemonics.size(); ++i) {
      FuncListItem::cpe_functions[functions[i] + ks[i]] = mnemonics[i];
    }

    for (size_t i = 0; i < mnemonics.size(); ++i) {
        FuncListItem* item = new FuncListItem(mnemonics[i], functions[i], ks[i]);
        items.push_back(item);
    }
}
